*************************************AUTOMORPHIC**********************************************************


#include <stdio.h>
#include<string.h>
#include<math.h>
void automorphic(int num){
     int count=0;
    int temp=num;
    int square=num*num;
    
    while(temp!=0){
        temp=temp/10;
        count++;
    }
    int rem;
    int temp1=(pow(10,count));
    int temp2=square%temp1;
    if(num==temp2){
        printf("automorphic");
    }
    else{
        printf("not");
    }
    
}

int main() {
   
    int num;
    printf("enter a number:");
    scanf("%d",&num);
   automorphic(num);
    

    return 0;
}


******************************************ARMSTRONG*************************************************

// Online C compiler to run C program online
#include <stdio.h>
#include<math.h>
void isarmstrong(int num){
     int temp=num;
   int sum=0;
    int rem;
    int count=0;
    while(temp!=0){
        temp=temp/10;
        count++;
    }
    temp=num;
    while(temp!=0){
        rem=temp%10;
        sum=sum+pow(rem,count);
        temp=temp/10;
    }
    if(sum==num){
        printf("armstrong");
    }
    else{
        printf("not armstrong");
    }
}
int main() {
    // Write C code here
    int num;
    printf("enter a number:");
    scanf("%d",&num);
    isarmstrong(num);
    
   

    return 0;
}

*********************************Array Duplicates Remove*******************************************

// Online C compiler to run C program online
#include <stdio.h>
void removearr(int arr[],int *n){
    int i,j;
    for(i=0;i<*n-1;i++){
        for(int j=i+1;j<*n;j++){
            if(arr[i]==arr[j]){
                int temp=arr[j];
                arr[j]=arr[*n-1];
                arr[*n-1]=temp;
               (*n)--;
                
            }
            // else{
            //     j++;
            // }
        }
    }
}
int main() {
    // Write C code here
    
    printf("enter n:");
    int n;
    scanf("%d",&n);
    int arr[n];
    int i;
   
    printf("enter array elements:");
    for(i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    printf("array elements are:");
    for(i=0;i<n;i++){
        printf("%d",arr[i]);
    }
    
     removearr(arr, &n);
    printf("elements after removing duplicates:");
    for(i=0;i<n;i++){
        printf("%d",arr[i]);
    }
    

    return 0;
}

**************************************LEADERS*********************************************************

// Online C compiler to run C program online
#include <stdio.h>
void leader(int arr[],int *n){
    int temp=arr[*n-1];
    printf("leaders are:");
     for(int i=*n-1;i>=0;i--){
        if(arr[i]>=temp){
            temp=arr[i];
            printf("%d\t",arr[i]);
            
        }
    }
}


int main()
{
    
    int n;
    printf("enter number of elements:");
    scanf("%d",&n);
    int arr[n];
    int i;
    for(i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    printf("\n array elements are:");
    for(i=0;i<n;i++){
        printf("%d \t",arr[i]);
    }
    leader(arr,&n);
   // printf("\n leaders are :");
   
    
   
    printf("\n\n");
    return 0;
}


****************************Merging two sorted arrays into third array************************************



#include <stdio.h>

void sorted(int arr1[],int arr2[],int arr3[],int *s1,int *s2,int *s3){
    printf("array elements are:");
    
    for(int i=0;i<*s3;i++){
        for(int j=i+1;j<*s3;j++){
            if(arr3[i]>arr3[j]){
                int temp=arr3[i];
                arr3[i]=arr3[j];
                arr3[j]=temp;
            }
        }
    }
    for(int i=0;i<*s3;i++){
        printf("%d",arr3[i]);
    }
    
    
}

int main()
{
    int s1,s2,s3;
    printf("array1 size:");
    scanf("%d",&s1);
    
     printf("array2 size:");
    scanf("%d",&s2);
    s3=s1+s2;
    int arr1[s1],arr2[s2],arr3[s3];
    printf("enter array1 elements:");
    int i,j,k;
    for(i=0;i<s1;i++){
        scanf("%d",&arr1[i]);
        arr3[i]=arr1[i];
    }
    k=s1;
    printf("enter array 2 elements:");
    for(i=0;i<s2;i++){
        scanf("%d",&arr2[i]);
        arr3[k]=arr2[i];
        k++;
    }
    sorted(arr1,arr2,arr3,&s1,&s2,&s3);
    

    return 0;
}


********************************array Duplicates print**************************************************

#include <stdio.h>

void find_duplicates(int arr[], int n) {
    printf("Duplicate elements in the array are: ");
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) {
                printf("%d ", arr[i]);
                break; // Once a duplicate is found, no need to check further
            }
        }
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    
    int arr[n];
    printf("Enter array elements: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    find_duplicates(arr, n);
    
    return 0;
}

***********************************MISSING ELEMENTS************************************************

#include <stdio.h>

void find_missing_elements(int arr[], int size) {
    int start = arr[0];
    int end = arr[size - 1];
    int hash[end + 1];
    
    // Initialize hash array to 0
    for (int i = 0; i <= end; i++) {
        hash[i] = 0;
    }
    
    // Count occurrences of each element in the array
    for (int i = 0; i < size; i++) {
        hash[arr[i]]++;
    }
    
    printf("Missing elements: ");
    // Print elements with count 0, indicating they are missing
    for (int i = start; i <= end; i++) {
        if (hash[i] == 0) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    
    int arr[n];
    printf("Enter the array elements in ascending order: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    find_missing_elements(arr, n);

    return 0;
}

*********************************COMMON ELEMENTS IN ARRAY*******************************************************


#include <stdio.h>
//void findcommon(arr1,arr2,size1,size2);

void findcommon(int arr1[],int arr2[],int size1,int size2){
    printf("common elements:");
    for(int i=0;i<size1;i++){
        for(int j=0;j<size2;j++){
            if(arr1[i]==arr2[j]){
                printf("%d",arr1[i]);
                break;
            }
        }
    }
    printf("\n");
}
int main()
{
    int size1,size2;
    printf("enter size of first array:");
    scanf("%d",&size1);
    int arr1[size1];
    printf("enter elements of first array:");
    for(int i=0;i<size1;i++){
        scanf("%d",&arr1[i]);
    }    
        printf("enter size of second array:");
    scanf("%d",&size2);
    int arr2[size2];
    printf("enter elements of second array:");
    for(int i=0;i<size2;i++){
        scanf("%d",&arr2[i]);
    
    
    }
    findcommon(arr1,arr2,size1,size2);
    
      

    return 0;
}


******************************************************STRING DUPLICATES***********************************************************************


#include <stdio.h>
#include<string.h>
void removedupl(char str[]){
    for(int i=0;i<strlen(str);i++){
        for(int j=i+1;str[j]!='\0';j++){
            if(str[i]==str[j]){
                for(int k=j;str[k]!=0;k++){
                    str[k]=str[k+1];
                }
            }
        }
    }
}
int main()
{
    char str[100];
    printf("enter a string:");
    fgets(str,100,stdin);
    removedupl(str);
    
printf("\n new string will be:%s",str);
    return 0;
}


************************************************************STRING PALINDROME************************************************************************


#include <stdio.h>
#include<string.h>
void palindrome(char str[]){
   int i,j;
    int len=strlen(str);
    int ispalindrome=1;
    for(i=0;i<len/2;i++){
        if(str[i]!=str[len-i-1]){
            ispalindrome=0;
            break;
        }
    }
    if(ispalindrome){
        printf("palindrome");
    }
    else{
        printf("not");
    }
     
}
int main()
{
    char str[100];
    printf("enter the string:");
    scanf("%s",str);
    palindrome(str);
    

    return 0;
}

******************************************String score Palindrome score**************************************


#include <stdio.h>
#include<string.h>
void palindromescore(char str[]){
         int res=0;
    int i=0;
    
    int len=strlen(str);
    for(i=0;i<len-3;i++){
        if(str[i]==str[i+3] && str[i+1]==str[i+2]){
            res+=5;
        }
        
    }
    for(i=0;i<len-4;i++){
        if(str[i]==str[i+4] && str[i+1]==str[i+3]){
            res+=10;
        }
    }
    printf("result: %d",res);

}
int main()
{
    char str[1024];
   
    printf("enter a string:");
    scanf("%s",str);
    palindromescore(str);

    return 0;
}

***************************************Capitalize First Word**********************************************


#include <stdio.h>
#include<string.h>
#include<ctype.h>
void capitalize(char str[]){
     char *token=strtok(str," ");
    while(token!=NULL){
        token[0]=toupper(token[0]);
        printf("%s ",token);
        token=strtok(NULL," ");
    }

}

int main()
{
    char str[100];
    fgets(str,100,stdin);
    capitalize(str);
   
    return 0;
}


**********************************REMOVE ADJACENT DUPLICATES************************************************


#include <stdio.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>

void removeadjdupli(char str[]){
    for(int i=0;i<strlen(str);i++){
        if(str[i]!=str[i-1] && str[i]!=str[i+1]){
            printf("%c",str[i]);
        }
    }
}
int main()
{
    printf("enter a string:");
    char str[100];
    fgets(str,100,stdin);
    removeadjdupli(str);
   

    return 0;
}

***************************************************PIPE***********************************************************



#include <stdio.h>
#include<string.h>
#include<ctype.h>

int main()
{
    char str[100];
    int count=0;
    printf("enter a pipe separated string");
    fgets(str,100,stdin);
    char *words[100];
    char *token=strtok(str,"|");
    while(token!=NULL){
        words[count++]=token;
        token=strtok(NULL,"|");
        
    }
    for (int i = 0; i < count-1; i++) {
        for(int j=0;j<count-i-1;j++){
            if(strcmp(words[j],words[j+1])>0){
                char *temp=words[j];
                words[j]=words[j+1];
                words[j+1]=temp;
            }
        }
    }
    printf("sorted string");
    for(int i=0;i<count;i++){
        printf("%s",words[i]);
        if (i != count - 1) {
            printf("|");
        }
    }

    
    

    return 0;
}

************************LEXIC REMOVE ADJACENT****************************************************************

#include<string.h>
#include <stdio.h>
void lexicremove(char str[]){
    int i,j=0;
    int len=strlen(str);
    for(i=0;i<len;i++){
        if(i<len-1 && str[i]==str[i+1]-1){
            i++;
        }
        else{
            str[j++]=str[i];
        }
    }
    str[j]='\0';
}
int main()
{
    char str[100];
    printf("enter a string:");
    fgets(str,100,stdin);
    lexicremove(str);
    printf("new string:%s",str);
    return 0;
}

****************************************Addition Score Of string*************************************************


#include <stdio.h>
#include<string.h>
#include<ctype.h>
void addition(char str[],char c,char sub[]){
    int index1=0;
    int index2=0;
    char *token1=strchr(str,c);
    if(token1!=NULL){
        index1=token1-str;
    }
    else{
        index1=-1;
    }
    
    char *token2=strstr(str,sub);
    if(token2!=NULL){
        index2=token2-str;
    }
    else{
        index2=-1;
    }
    int sum=index1+index2;
}
int main()
{
    printf("enter a string:");
    char str[100];
    fgets(str,100,stdin);
    printf("enter a character:");
    char c;
    scanf("%c",&c);
    printf("enter a substring:");
    char sub[100];
    scanf("%s",sub);
    addition(str,c,sub);
    
    printf("%d",sum);

    return 0;
}


**********************************************ANAGRAMS**********************************************************

#include<string.h>
#include <stdio.h>

int anagram(char str1[],char str2[]){
    int len1=strlen(str1);
    int len2=strlen(str2);
    char temp;
    
    if(len1!=len2){
        printf("strings are not anagrams");
        return 0;
    }
    
    for(int i=0;i<len1-1;i++){
        for(int j=i+1;j<len1;j++){
            if(str1[i]>str1[j]){
            temp=str1[i];
            str1[i]=str1[j];
            str1[j]=temp;
            } 
             if(str2[i]>str2[j]){
            temp=str2[i];
            str2[i]=str2[j];
            str2[j]=temp;
            }
            
        }
    }
    for(int i=0;i<len1;i++){
        if(str1[i]!=str2[i]){
            printf("not anagrams");
            return 0;
        }
       
    }
    printf("anagrams");
}

int main()
{
    char str1[100];
    char str2[100];
    
    printf("enter string 1:");
    scanf("%s",str1);
    
    printf("enter string 2:");
    scanf("%s",str2);
    anagram(str1,str2);
    
    

    return 0;
}

**********************************REVERSE ORDER OF WORDS********************************************************

#include<stdlib.h>
#include<string.h>
#include <stdio.h>

int main()
{
    char str[100];
    char *reverse[100];
    int i=0;
    printf("enter a string:");
    scanf("%[^\n]s",str);
    printf("\n");
  
    char *token=strtok(str," ");
    while(token!=NULL){
        reverse[i++]=token;
        token=strtok(NULL," ");
    }
    
    for(int j=i-1;j>=0;j--){
        printf("%s ",reverse[j]);
    }
    return 0;
}

******************************************LEXICOGRAPHICAL*****************************************************************************************


// PROGRAM FOR LEXICOGRAPHICAL 
#include <stdio.h>
#include<string.h>

int main()
{
    int n;
    printf("enter n:");
    scanf("%d",&n);
    char str[n][50],temp[50];
    printf("enter 5 words:");
    for(int i=0;i<n+1;i++){
        fgets(str[i],sizeof(str[i]),stdin);
        
    }for(int i=0;i<n+1;i++){
        for(int j=i+1;j<n+1;j++){
            if(strcmp(str[i],str[j])>0){
                strcpy(temp,str[i]);
                strcpy(str[i],str[j]);
                strcpy(str[j],temp);
            }
        }
    }
printf("\n lexicographical order is \n");
for(int i=0;i<n+1;i++){
    fputs(str[i],stdout);
}
    return 0;
}



*******************************************************struct product total sales amount**************************************************************


#include <stdio.h>
struct Product{
    int product_ID;
    int total_sales_amount;
    
    
};

int main()
{
    
    int n;
    printf("enter the number of product records:");
    scanf("%d",&n);
    struct Product arr[n];
    printf("enter product records (product_id- total_sales_amount:\n");
    for(int i=0;i<n;i++){
        scanf("%d-%d",&arr[i].product_ID,&arr[i].total_sales_amount);
    }
     // sort records according to total_sales_amount
     for(int i=0;i<n-1;i++){
         for(int j=0;j<n-i-1;j++){
             if(arr[j].total_sales_amount<arr[j+1].total_sales_amount){
                 // swap
                 struct Product temp=arr[j];
                 arr[j]=arr[j+1];
                 arr[j+1]=temp;
             }
         }
         
     }
     printf("\n Products records :");
     float max_sales_amount[1000]={0};
     for(int i=0;i<n;i++){
         if(arr[i].total_sales_amount>=max_sales_amount[arr[i].product_ID]){
             printf("Product ID:%d-Total Sales Amount:%d\n",arr[i].product_ID,arr[i].total_sales_amount);
             max_sales_amount[arr[i].product_ID]=arr[i].total_sales_amount;
         }
     }
    
    

    return 0;
}


*******************************************************ROTATE ARRAY ELEMENTS*******************************************************************


#include <stdio.h>
#include <stdlib.h>
 
void rotate(int arr[], int n, int k)
{
    while(k>=n)
    {
        k=k-n;
    }
    for(int i=0;i<n;i++)
    {
        if(i<k)
        {
            printf("%d ",arr[n+i-k]);
        }
        else
        {
            printf("%d ",arr[i-k]);
        }
    }
}
 
int main()
{
    int n,k;
    printf("Enter the number of elements of array : ");
    scanf("%d",&n);
    int arr[n];
    printf("Enter elements of array : ");
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    printf("Enter value of 'K' : ");
    scanf("%d",&k);
    rotate(arr,n,k);
    printf("\n\n");
    return 0;
}

***************************************************************REPLACE*************************************************************************

// Write a C program to replace first occurrence of a character with another character in a string.
#include <stdio.h>
#include<string.h>

int main()
{
    char str[100];
    printf("enter a string:");
    fgets(str,100,stdin);
    printf("string is:%s ",str);
    printf("\nenter character to replace:");
    char c,r;
    scanf("%c",&c);
    printf("\n replaced with:");
    scanf(" %c",&r);
    int i,j;
    for(i=0;i<100;i++){
        if(str[i]==c){
            str[i]=r;
            break;
        }
    }
    printf("%s",str);

    return 0;
}

********************************************************REMOVE LAST OCCURENCE**********************************************************************


#include <stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 100
int main()
{
    char str[MAX],c;
    printf("Enter the sentence : ");
    fgets(str, MAX, stdin);
    printf("Enter the character to remove : ");
    scanf("%c",&c);
    int l = strlen(str);
    for(int i=l-1;i>=0;i--)
    {
        if(str[i]==c)
        {
            for(int j=i;j>=0;j--)
            {
                str[j]=str[j-1];
            }
            l--;
            break;
        }
    }
    for(int i=0;i<l;i++)
        printf("%c",str[i]);
    return 0;
}

**************************************CONSONENTS and VOWELS*****************************************************************************88

#include <stdio.h>
#include<string.h>
#include<stdlib.h>
#include<stdbool.h>

bool checkVowel(char);

int main() {
   
   char str[100];
   int count =0, conso = 0,currConso = 0;
   printf("Enter the string\n");
   scanf("%s",str);
   for(int i=0;i<strlen(str);i++){
      if(!checkVowel(str[i])) conso++;
   }
 
   int i=0;
   while(i < strlen(str) && i != strlen(str)-1){
       if(checkVowel(str[i])){
         
            if(currConso > conso) count++;
       }else{
             currConso++;
           conso--;
            if(currConso > conso) count++;
       }
       
       i++;
   }
   printf("Total no. of partions possible are: \n");
   printf("%d",count);
   

    return 0;
}


bool checkVowel(char ch){
   if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') return true;
   return false;
   
}


*********************************************************DATE MONTH YEAR**************************************************************************

#include <stdio.h>
#include<string.h>
#include<stdlib.h>
 
char* compare(char*,char*);
 
int main() {
    int n;
    printf("Enter n\n");
    scanf("%d",&n);
    char str[n][100];
    char res[n][100];
    printf("Enter all strings\n");
    for(int i=0;i<n;i++){
        char temp[100],temp1[100],temp2[100];
        scanf(" %[^\n]s",temp);
        // strcpy(str[i],temp);
        strncpy(temp1,temp,8);
        strncpy(temp2,temp+9,8);
       strcpy(res[i],compare(temp1,temp2));
    }
    for(int i=0;i<n;i++){
        printf("%s\n",res[i]);
    }
    return 0;
}
 
char *compare(char *str1,char *str2){
    int i=0;
    char *t1 = strtok(str1,"/");
    char *t2 = strtok(str2,"/");
    while(i < 3){
        if(atoi(t1) < atoi(t2)){
            return "Earlier";
        }else if(atoi(t1) > atoi(t2)){
            return "Later";
        }
        t1 = strtok(NULL,"/");
        t2 = strtok(NULL,"/");
        i++;
    }
    return "Equal";
}

****************************************************************************UNIQUE WORDS DUPLICATE****************************************************

Input space separated words and find the unique words.and then consider anagrams as also duplicates then find unique words.
 
 
#include <stdio.h>
#include<string.h>
#include<stdbool.h>
bool isanagram(char str1[],char str2[])
{
    if(strlen(str1)!=strlen(str2))
        return false;
    int hash[100];
    for(int i=0;i<100;i++)
    {
        hash[i]=0;
    }
    for(int i=0;i<strlen(str1);i++)
    {
        hash[str1[i]-'A']++;
        hash[str2[i]-'A']--;
    }
    for(int i=0;i<strlen(str1);i++)
    {
        if(hash[str1[i]-'A']!=0)
            return false;
    }
    return true;
}
void print_ele(char words[100][100],int n)
{
    for(int i=0;i<n;i++)
    {
        int flag=0;
        for(int j=0;j<n;j++)
        {
            if(i==j)
                continue;
           if(isanagram(words[i],words[j])){
               flag=1;
               break;
           }
        }
        if(flag==0)
            printf("%s\t",words[i]);
    }
}
int main()
{
    char str[100];
    char words[100][100];
    int n=0;
    printf("Enter string : ");
    fgets(str,100,stdin);
    str[strcspn(str,"\n")]='\0';
    char *token=strtok(str," ");
    while(token!=NULL)
    {
        strcpy(words[n++],token);
        token=strtok(NULL," ");
    }
    print_ele(words,n);

 
    return 0;
}


***********************************************************************STRUCTURE STUDENT*****************************************************************

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int compareAverageMarks(const void *,const void *);

typedef struct Student {
	char student_id[1024];
	double marks;
}Student;



int main(){
	double markHash[2000];
	double countHash[2000];
	memset(markHash,0,2000);
	memset(countHash,0,2000);
	int n;
	printf("Enter size of students\n");
	scanf("%d",&n);
	Student s[n];
	printf("Enter student details\n");
	for(int i=0;i<n;i++){
	char temp[20];
	scanf("%s",temp);
	char* t = strtok(temp,"-");
	strcpy(s[i].student_id,t);
	t = strtok(NULL,"-");
	s[i].marks = atoi(t);
	}

	printf("Printing all students\n");
	for(int i=0;i<n;i++){
	printf("%s - %.2lf\n",s[i].student_id,s[i].marks);
	}

	for(int i=0;i<n;i++){
	int digit;
	sscanf(s[i].student_id,"S%d",&digit);
	markHash[digit] += s[i].marks;
	countHash[digit]++;
	}

	for(int i=1001;i<2000;i++){
	if(markHash[i] != 0){
		double temp  = markHash[i] / countHash[i];
		markHash[i] = temp;
	}
	}

	int count = 0;
    Student sol[n];

    for(int i=1001;i<2000;i++){
    	if(markHash[i] != 0){
		char temp[20];
	sprintf(temp,"S%d",i);
	strcpy(sol[count].student_id,temp);
	sol[count].marks = markHash[i];
	count++;
	}
    }

    qsort(sol,count,sizeof(Student),compareAverageMarks);
printf("\n\n");
printf("Final stduents with avg marks\n");
    for(int i=0;i<count;i++){
        printf("%s - %.2lf\n",sol[i].student_id,sol[i].marks);
    }

return EXIT_SUCCESS;
}

int compareAverageMarks(const void *a, const void *b) {
	const Student *student1 = (const Student *)a;
	const Student *student2 = (const Student *)b;

	if(student1 -> marks > student2 -> marks){
	return -1;
	}else if(student1 -> marks < student2 -> marks){
	return 1;
	}else{
		return 0;
	}
}


*********************************************************STRUCTURE 3rd CODE PRODUCT INVENTORY INFORMATION********************************************

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int compareAverageMarks(const void *,const void *);

typedef struct Student {
	char student_id[1024];
	double marks;
}Student;



int main(){
	double markHash[2000];
	double countHash[2000];
	memset(markHash,0,2000);
	memset(countHash,0,2000);
	int n;
	printf("Enter size of students\n");
	scanf("%d",&n);
	Student s[n];
	printf("Enter student details\n");
	for(int i=0;i<n;i++){
	char temp[20];
	scanf("%s",temp);
	char* t = strtok(temp,"-");
	strcpy(s[i].student_id,t);
	t = strtok(NULL,"-");
	s[i].marks = atoi(t);
	}

	printf("Printing all students\n");
	for(int i=0;i<n;i++){
	printf("%s - %.2lf\n",s[i].student_id,s[i].marks);
	}

	for(int i=0;i<n;i++){
	int digit;
	sscanf(s[i].student_id,"S%d",&digit);
	markHash[digit] += s[i].marks;
	countHash[digit]++;
	}

	for(int i=1001;i<2000;i++){
	if(markHash[i] != 0){
		double temp  = markHash[i] / countHash[i];
		markHash[i] = temp;
	}
	}

	int count = 0;
    Student sol[n];

    for(int i=1001;i<2000;i++){
    	if(markHash[i] != 0){
		char temp[20];
	sprintf(temp,"S%d",i);
	strcpy(sol[count].student_id,temp);
	sol[count].marks = markHash[i];
	count++;
	}
    }

    qsort(sol,count,sizeof(Student),compareAverageMarks);
printf("\n\n");
printf("Final stduents with avg marks\n");
    for(int i=0;i<count;i++){
        printf("%s - %.2lf\n",sol[i].student_id,sol[i].marks);
    }

return EXIT_SUCCESS;
}

int compareAverageMarks(const void *a, const void *b) {
	const Student *student1 = (const Student *)a;
	const Student *student2 = (const Student *)b;

	if(student1 -> marks > student2 -> marks){
	return -1;
	}else if(student1 -> marks < student2 -> marks){
	return 1;
	}else{
		return 0;
	}
}



****************************************************************************************************************************************************

Input three strings check if you can write both string 1 and string 2 using characters of string3


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define NO_OF_CHARS 256
int areAnagram(char* str1, char* str2) 
{ 
    int count1[NO_OF_CHARS] = { 0 }; 
    int count2[NO_OF_CHARS] = { 0 }; 
    int i; 
    for (i = 0; str1[i] && str2[i]; i++) { 
        count1[str1[i]]++; 
        count2[str2[i]]++; 
    }
    if (str1[i] || str2[i]) 
        return 0; 
    for (i = 0; i < NO_OF_CHARS; i++) 
        if (count1[i] != count2[i]) 
            return 0; 
    return 1; 
}
char* concat(char* s1, char* s2)
{
  int length, j;
  length = 0;
  while (s1[length] != '\0') {
    ++length;
  }
  for (j = 0; s2[j] != '\0'; ++j, ++length) {
    s1[length] = s2[j];
  }
  s1[length] = '\0';
  return s1;
}
void check(char* a, char* b, char* c)
{
    int l1=strlen(a);
    int l2=strlen(b);
    int l3=strlen(c);
    if(l1+l2!=l3)
    {
        printf("Not possible");
        return 0;
    }
    concat(a,b);
    if(areAnagram(a,c))
        printf("Possible");
    else
        printf("Not Possible");
}
int main()
{
    char a[50],b[50],c[100];
    printf("Enter three strings respectively : ");
    gets(a);
    gets(b);
    gets(c);
    check(a,b,c);
    return 0;
}
